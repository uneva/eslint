import type { FlatConfigItem, OptionsJavascript } from "../types";

import js from "@eslint/js";
import globals from "globals";
import { isInEditor } from "../state";
import { pluginUnusedImports } from "../plugins";

export function javascript(options?: OptionsJavascript): FlatConfigItem[] {
    return [
        js.configs.recommended,
        {
            name: "uneva/javascript/setup",
            languageOptions: {
                ecmaVersion: "latest",
                globals: {
                    ...globals.browser,
                    ...globals.es2021,
                    ...globals.node,
                    document: "readonly",
                    navigator: "readonly",
                    window: "readonly",
                },
                parserOptions: {
                    ecmaFeatures: {
                        jsx: true,
                    },
                    ecmaVersion: "latest",
                    sourceType: "module",
                },
                sourceType: "module",
            },
            linterOptions: {
                reportUnusedDisableDirectives: true,
            },
        },
        {
            name: "uneva/javascript/rules",
            plugins: {
                "unused-imports": pluginUnusedImports,
            },
            rules: {
                // Possible Problems
                "array-callback-return": ["error", { allowImplicit: true }],
                "constructor-super": "error",
                "for-direction": "error",
                "getter-return": ["error", { allowImplicit: false }],
                "no-async-promise-executor": "error",
                "no-await-in-loop": "error",
                "no-class-assign": "error",
                "no-compare-neg-zero": "error",
                "no-cond-assign": ["error", "always"],
                "no-const-assign": "error",
                "no-constant-binary-expression": "error",
                "no-constant-condition": ["error", { checkLoops: false }],
                "no-constructor-return": "error",
                "no-control-regex": "error",
                "no-debugger": "warn",
                "no-dupe-args": "error",
                "no-dupe-class-members": "error",
                "no-dupe-else-if": "error",
                "no-dupe-keys": "error",
                "no-duplicate-case": "error",
                "no-duplicate-imports": "off",
                "no-empty-character-class": "error",
                "no-empty-pattern": "error",
                "no-ex-assign": "error",
                "no-fallthrough": "error",
                "no-func-assign": "error",
                "no-import-assign": "error",
                "no-inner-declarations": "error",
                "no-invalid-regexp": "error",
                "no-irregular-whitespace": "error",
                "no-loss-of-precision": "error",
                "no-misleading-character-class": "error",
                "no-new-native-nonconstructor": "error",
                "no-obj-calls": "error",
                "no-promise-executor-return": ["error", { allowVoid: false }],
                "no-prototype-builtins": "error",
                "no-self-assign": "error",
                "no-self-compare": "error",
                "no-setter-return": "error",
                "no-sparse-arrays": "error",
                // "no-template-curly-in-string": "error",
                "no-this-before-super": "error",
                "no-undef": "error",
                "no-unexpected-multiline": "error",
                "no-unmodified-loop-condition": "error",
                "no-unreachable": "error",
                "no-unreachable-loop": "error",
                "no-unsafe-finally": "error",
                "no-unsafe-negation": "error",
                "no-unsafe-optional-chaining": "error",
                "no-unused-private-class-members": "error",
                "no-unused-vars": ["error", { vars: "all", args: "after-used", ignoreRestSiblings: true }],
                "no-use-before-define": ["error", { functions: false, classes: false, variables: false }],
                "no-useless-backreference": "error",
                "require-atomic-updates": "error",
                "use-isnan": ["error", { enforceForIndexOf: true, enforceForSwitchCase: true }],
                "valid-typeof": ["error", { requireStringLiterals: true }],

                // Suggestions
                "accessor-pairs": "off",
                "arrow-body-style": ["off", "as-needed", { requireReturnForObjectLiteral: false }],
                "block-scoped-var": "error",
                camelcase: "off",
                "capitalized-comments": "off",
                "class-methods-use-this": ["off", { exceptMethods: [] }],
                complexity: ["off", 10],
                "consistent-return": "off",
                "consistent-this": "off",
                curly: ["error", "multi-line"],
                "default-case": ["warn", { commentPattern: "^no default$" }],
                "default-case-last": "error",
                "default-param-last": "error",
                "dot-notation": ["error", { allowKeywords: true }],
                eqeqeq: ["error", "smart"],
                "func-name-matching": ["off", "always", { includeCommonJSModuleExports: false }],
                "func-names": "off",
                "func-style": "off",
                // "grouped-accessor-pairs": ["error", "getBeforeSet"],
                "guard-for-in": "error",
                "id-denylist": "off",
                "id-length": "off",
                "id-match": "off",
                "init-declarations": "off",
                "logical-assignment-operators": "off",
                "max-classes-per-file": "off",
                "max-depth": ["off", 4],
                "max-lines": ["off", { max: 1000, skipBlankLines: true, skipComments: true }],
                "max-lines-per-function": ["off", { max: 100, skipBlankLines: true, skipComments: true, IIFEs: true }],
                "max-nested-callbacks": "off",
                "max-params": ["off", 3],
                "max-statements": ["off", 10],
                "multiline-comment-style": ["off", "starred-block"],
                "new-cap": ["error", {
                    newIsCap: true,
                    newIsCapExceptions: [],
                    capIsNew: false,
                    capIsNewExceptions: ["Immutable.Map", "Immutable.Set", "Immutable.List"],
                }],
                "no-alert": "warn",
                "no-array-constructor": "error",
                "no-bitwise": "warn",
                "no-caller": "error",
                "no-case-declarations": "error",
                "no-console": isInEditor ? "off" : ["warn", { allow: ["warn", "error"] }],
                "no-continue": "off",
                "no-delete-var": "error",
                "no-div-regex": "off",
                "no-else-return": "off",
                "no-empty": ["error", { allowEmptyCatch: true }],
                "no-empty-function": ["error", { allow: ["arrowFunctions", "functions", "methods"] }],
                // "no-empty-static-block": "off",
                "no-eq-null": "off",
                "no-eval": ["error", { allowIndirect: true }],
                "no-extend-native": "error",
                "no-extra-bind": "error",
                "no-extra-boolean-cast": "error",
                "no-extra-label": "error",
                "no-global-assign": ["error", { exceptions: [] }],
                "no-implicit-coercion": ["off", {
                    boolean: false,
                    number: true,
                    string: true,
                    allow: [],
                }],
                "no-implicit-globals": "off",
                "no-implied-eval": "error",
                "no-inline-comments": "off",
                "no-invalid-this": "off",
                "no-iterator": "error",
                "no-label-var": "error",
                "no-labels": ["warn", { allowLoop: false, allowSwitch: false }],
                "no-lone-blocks": "error",
                "no-lonely-if": "error",
                "no-loop-func": "error",
                "no-magic-numbers": ["off", {
                    ignore: [],
                    ignoreArrayIndexes: true,
                    enforceConst: true,
                    detectObjects: false,
                }],
                "no-multi-assign": "error",
                "no-multi-str": "error",
                "no-negated-condition": "off",
                // "no-nested-ternary": "error",
                "no-new": "error",
                "no-new-func": "error",
                "no-new-wrappers": "error",
                "no-nonoctal-decimal-escape": "error",
                "no-octal": "error",
                "no-octal-escape": "error",
                "no-param-reassign": ["warn", {
                    props: true,
                    ignorePropertyModificationsFor: [
                        "acc", // for reduce accumulators
                        "e", // for e.returnvalue
                        "ctx", // for Koa routing
                        "draft", // for immer
                        "req", // for Express requests
                        "request", // for Express requests
                        "res", // for Express responses
                        "response", // for Express responses
                        "$scope", // for Angular 1 scopes
                    ],
                }],
                "no-plusplus": ["off", { allowForLoopAfterthoughts: true }],
                "no-proto": "error",
                "no-redeclare": "error",
                "no-regex-spaces": "error",
                "no-restricted-exports": "off",
                "no-restricted-globals": "off",
                "no-restricted-imports": ["off", { paths: [], patterns: [] }],
                "no-restricted-properties": "off",
                "no-restricted-syntax": "off",
                "no-return-assign": ["error", "always"],
                "no-script-url": "error",
                "no-sequences": "error",
                "no-shadow": "error",
                "no-shadow-restricted-names": "error",
                "no-ternary": "off",
                "no-throw-literal": "warn",
                "no-undef-init": "error",
                "no-undefined": "off",
                "no-underscore-dangle": "off",
                "no-unneeded-ternary": ["error", { defaultAssignment: false }],
                "no-unused-expressions": ["error", {
                    allowShortCircuit: true,
                    allowTaggedTemplates: true,
                    allowTernary: true,
                }],
                "no-unused-labels": "error",
                "no-useless-call": "off",
                "no-useless-catch": "error",
                "no-useless-computed-key": "error",
                "no-useless-concat": "error",
                "no-useless-constructor": "error",
                "no-useless-escape": "error",
                "no-useless-rename": ["error", {
                    ignoreDestructuring: false,
                    ignoreImport: false,
                    ignoreExport: false,
                }],
                "no-useless-return": "error",
                "no-var": "error",
                "no-void": "error",
                "no-warning-comments": ["off", { terms: ["todo", "fixme"], location: "start" }],
                "no-with": "error",
                "object-shorthand": ["error", "always", { avoidQuotes: true, ignoreConstructors: false }],
                "one-var": ["error", "never"],
                "operator-assignment": ["warn", "always"],
                "prefer-arrow-callback": ["error", { allowNamedFunctions: false, allowUnboundThis: true }],
                "prefer-const": ["error", { destructuring: "any", ignoreReadBeforeAssign: true }],
                "prefer-destructuring": [
                    "warn",
                    {
                        VariableDeclarator: {
                            array: false,
                            object: true,
                        },
                        AssignmentExpression: {
                            array: false,
                            object: false,
                        },
                    },
                    {
                        enforceForRenamedProperties: false,
                    },
                ],
                "prefer-exponentiation-operator": "error",
                "prefer-named-capture-group": "off",
                "prefer-numeric-literals": "off",
                "prefer-object-has-own": "error",
                "prefer-object-spread": "off",
                "prefer-promise-reject-errors": ["warn", { allowEmptyReject: true }],
                "prefer-regex-literals": ["error", { disallowRedundantWrapping: true }],
                "prefer-rest-params": "error",
                "prefer-spread": "error",
                "prefer-template": "error",
                radix: ["error", "as-needed"],
                "require-await": "error",
                "require-unicode-regexp": "off",
                "require-yield": "error",
                "sort-imports": [
                    "error",
                    {
                        allowSeparatedGroups: false,
                        ignoreCase: false,
                        ignoreDeclarationSort: true,
                        ignoreMemberSort: false,
                        memberSyntaxSortOrder: ["none", "all", "multiple", "single"],
                    },
                ],
                "sort-keys": ["off", "asc", { caseSensitive: false, natural: true }],
                "sort-vars": "off",
                strict: "off",
                "symbol-description": "error",
                "vars-on-top": "error",
                yoda: ["error", "never", { exceptRange: true }],

                "unused-imports/no-unused-imports": (options?.isInEditor || isInEditor) ? "warn" : "off",
                "unused-imports/no-unused-vars": ["error", {
                    args: "after-used",
                    ignoreRestSiblings: true,
                }],
                ...options?.overrides || {},
            },
        },
        {
            name: "uneva/javascript/noConsole",
            files: ["**/scripts/*", "**/test/*"],
            rules: {
                "no-console": "off",
            },
        },
    ];
}
